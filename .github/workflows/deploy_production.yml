name: "Deploy code to production"
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # ============= Build ===============
  build:
    name: Build
    runs-on: self-hosted
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Build Backend
        run: |
          cd be
          docker build -f ../.docker/be/Dockerfile -t todo-be:latest . || { echo "Backend build failed"; exit 1; }

      - name: Build Frontend
        run: |
          cd fe
          docker build -f ../.docker/fe/Dockerfile -t todo-fe:latest . || { echo "Frontend build failed"; exit 1; }

      - name: ✅ Build Test Completed
        run: echo "Build test completed successfully!"

  # ============= Deploy ===============
  deploy:
    name: Deploy to Production
    runs-on: self-hosted
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check Docker Status
        run: |
          echo "🐳 Checking Docker status..."
          docker --version
          docker-compose --version
          docker ps -a
          docker images

      - name: Force Clean Docker
        run: |
          echo "🧹 Force cleaning all Docker resources..."
          
          # Stop all running containers
          docker stop $(docker ps -aq) || true
          
          # Remove all containers
          docker rm -f $(docker ps -aq) || true
          
          # Remove all networks
          docker network prune -f || true
          
          # Remove unused images
          docker image prune -f || true
          
          # Show final status
          echo "📊 Docker status after cleanup:"
          docker ps -a
          docker images

      - name: Start Deploy
        run: |
          echo "📥 Code already checked out..."
          
          # Force stop and remove all containers
          echo "⏹️ Force stopping all containers..."
          docker-compose -f docker-compose.yml down --remove-orphans --volumes || true
          
          # Stop and remove any containers using our ports
          echo "🔫 Stopping containers using ports 3000 and 4000..."
          docker ps -q --filter "publish=3000" | xargs -r docker stop || true
          docker ps -q --filter "publish=4000" | xargs -r docker stop || true
          docker ps -q --filter "publish=3000" | xargs -r docker rm -f || true
          docker ps -q --filter "publish=4000" | xargs -r docker rm -f || true
          
          # Kill any processes using ports 3000 and 4000 (alternative methods)
          echo "🔫 Killing processes on ports 3000 and 4000..."
          netstat -tulpn | grep :3000 | awk '{print $7}' | cut -d/ -f1 | xargs -r kill -9 || true
          netstat -tulpn | grep :4000 | awk '{print $7}' | cut -d/ -f1 | xargs -r kill -9 || true
          fuser -k 3000/tcp || true
          fuser -k 4000/tcp || true
          
          # Remove any dangling containers and networks
          echo "🧹 Cleaning up Docker resources..."
          docker container prune -f || true
          docker network prune -f || true
          docker image prune -f || true
          
          # Wait a bit for ports to be released
          echo "⏳ Waiting for ports to be released..."
          sleep 10
          
          # Check if ports are free using netstat
          echo "🔍 Checking port availability..."
          if netstat -tulpn | grep :3000; then
            echo "❌ Port 3000 is still in use"
            netstat -tulpn | grep :3000
            exit 1
          fi
          if netstat -tulpn | grep :4000; then
            echo "❌ Port 4000 is still in use"
            netstat -tulpn | grep :4000
            exit 1
          fi
          echo "✅ Ports 3000 and 4000 are free"
          
          # Final port check before deploy
          echo "🔍 Final port check..."
          netstat -tulpn | grep -E ":(3000|4000)" || echo "✅ All ports are free"
          
          # Build and start with production environment
          echo "🚀 Building and starting containers..."
          docker-compose -f docker-compose.yml build --no-cache || { echo "Docker build failed"; exit 1; }
          docker-compose -f docker-compose.yml up -d || { echo "Docker up failed"; exit 1; }
          
          # Health check
          echo "🏥 Performing health check..."
          sleep 30
          
          # Check if containers are running
          if ! docker-compose -f docker-compose.yml ps | grep -q "Up"; then
            echo "❌ Containers are not running properly"
            docker-compose -f docker-compose.yml logs
            exit 1
          fi
          
          # Try health check on frontend port
          if curl -f http://localhost:3000/ > /dev/null 2>&1; then
            echo "✅ Frontend health check passed"
          else
            echo "⚠️ Frontend health check failed, but continuing..."
          fi
          
          echo "✅ Deployment completed successfully!"
          echo "🌐 Frontend: https://todonest.id.vn"
          echo "🌐 Backend API: https://todonest.id.vn/api"

services:
  backend:
    build:
      context: ./be
      dockerfile: ../.docker/be/Dockerfile
    container_name: todo_be
    expose:
      - "4000"
    restart: always
    stop_grace_period: 5s
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      DATABASE_URL: ${DATABASE_URL}
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:4000/', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 10s

  frontend:
    build:
      context: ./fe
      dockerfile: ../.docker/fe/Dockerfile
    container_name: todo_fe
    expose:
      - "3000"
    stop_grace_period: 5s
    environment:
      NUXT_HOST: ${NUXT_HOST:-0.0.0.0}
      NUXT_PORT: ${NUXT_PORT:-3000}
      API_URL: ${API_URL:-http://nginx/api}
    depends_on:
      backend:
        condition: service_healthy
    restart: always
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/"]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 10s

  db:
    image: postgres:15
    container_name: postgres-db
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-todo_nest}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-todo_nest}"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s

  
  nginx:
    image: nginx:alpine
    container_name: todo_nginx
    ports:
      - "${NGINX_PORT:-80}:80"
      - "443:443"
    volumes:
      - ./.docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - /var/lib/letsencrypt:/var/lib/letsencrypt:ro
    stop_grace_period: 5s
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy
    restart: always
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://127.0.0.1/health"]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 5s


volumes:
  postgres_data:
